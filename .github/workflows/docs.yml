name: Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  check-docs:
    name: Check Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: docs-${{ hashFiles('**/Cargo.lock') }}

    - name: Check documentation builds
      run: cargo doc --no-deps --all-features --document-private-items

    - name: Check for broken doc links
      run: |
        cargo doc --no-deps --all-features --document-private-items 2>&1 | \
        grep -E "(warning:|error:)" | \
        grep -E "(broken_intra_doc_links|private_intra_doc_links)" && exit 1 || true

    - name: Test documentation examples
      run: cargo test --doc --all-features

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: docs-build-${{ hashFiles('**/Cargo.lock') }}

    - name: Build API documentation
      run: |
        cargo doc --no-deps --all-features --document-private-items
        echo '<meta http-equiv="refresh" content="0; url=tokio_events">' > target/doc/index.html

    - name: Install mdBook
      uses: taiki-e/install-action@mdbook

    - name: Build guide documentation
      run: |
        mkdir -p docs-site
        
        # Create mdBook configuration
        cat > docs-site/book.toml << 'EOF'
        [book]
        authors = ["tokio-events contributors"]
        language = "en"
        multilingual = false
        src = "src"
        title = "tokio-events Guide"
        description = "A modern, type-safe async event bus for Rust applications"

        [preprocessor.links]

        [output.html]
        default-theme = "navy"
        preferred-dark-theme = "navy"
        git-repository-url = "https://github.com/abhiyana/tokio-events"
        edit-url-template = "https://github.com/abhiyana/tokio-events/edit/main/docs/{path}"

        [output.html.search]
        enable = true

        [output.html.print]
        enable = true

        [output.html.fold]
        enable = false
        level = 0
        EOF

        # Create source directory structure
        mkdir -p docs-site/src
        
        # Create SUMMARY.md
        cat > docs-site/src/SUMMARY.md << 'EOF'
        # Summary

        [Introduction](./introduction.md)

        # User Guide

        - [Getting Started](./getting-started.md)
        - [Core Concepts](./core-concepts.md)
        - [Events](./events.md)
        - [Handlers](./handlers.md)
        - [Configuration](./configuration.md)
        - [Examples](./examples.md)

        # Advanced Topics

        - [Performance](./performance.md)
        - [Best Practices](./best-practices.md)
        - [Troubleshooting](./troubleshooting.md)

        # Reference

        - [API Documentation](./api.md)
        - [Architecture](./architecture.md)
        EOF

        # Create introduction
        cat > docs-site/src/introduction.md << 'EOF'
        # tokio-events

        A modern, type-safe async event bus for Rust applications built on Tokio.

        ## Features

        - **Type-safe** event publishing and subscription
        - **High performance** with zero-copy message passing  
        - **Async-first** design built on Tokio
        - **Flexible** subscription management
        - **Thread-safe** by default

        ## Quick Example

        ```rust
        use tokio_events::{Event, EventBus};

        #[derive(Debug, Clone)]
        struct UserRegistered {
            user_id: u64,
            email: String,
        }

        impl Event for UserRegistered {
            fn event_type() -> &'static str {
                "UserRegistered"
            }
        }

        #[tokio::main]
        async fn main() -> Result<(), Box<dyn std::error::Error>> {
            // Create event bus
            let bus = EventBus::builder().build().await?;
            
            // Subscribe to events
            let handle = bus.subscribe(|event: UserRegistered| async move {
                println!("New user registered: {}", event.email);
            }).await?;
            
            // Publish events
            bus.publish(UserRegistered {
                user_id: 123,
                email: "user@example.com".to_string(),
            }).await?;
            
            Ok(())
        }
        ```
        EOF

        # Copy existing guide content
        if [ -f docs/guide-examples.md ]; then
          cp docs/guide-examples.md docs-site/src/getting-started.md
        else
          echo "# Getting Started\n\nComing soon..." > docs-site/src/getting-started.md
        fi

        # Create placeholder pages
        for page in core-concepts events handlers configuration examples performance best-practices troubleshooting api architecture; do
          echo "# $(echo $page | sed 's/-/ /g' | sed 's/\b\w/\u&/g')" > docs-site/src/${page}.md
          echo "" >> docs-site/src/${page}.md
          echo "Coming soon..." >> docs-site/src/${page}.md
        done

        # Build the book
        cd docs-site && mdbook build

    - name: Combine documentation
      run: |
        mkdir -p public
        
        # Copy API docs
        cp -r target/doc/* public/
        
        # Copy guide
        mkdir -p public/guide
        cp -r docs-site/book/* public/guide/
        
        # Create main index
        cat > public/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>tokio-events Documentation</title>
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 2rem;
                    line-height: 1.6;
                }
                .container { text-align: center; }
                .links { margin: 2rem 0; }
                .link-button {
                    display: inline-block;
                    padding: 1rem 2rem;
                    margin: 0.5rem;
                    background: #007acc;
                    color: white;
                    text-decoration: none;
                    border-radius: 6px;
                    font-weight: 500;
                }
                .link-button:hover { background: #005a9e; }
                .description { color: #666; margin: 1rem 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>tokio-events Documentation</h1>
                <p class="description">A modern, type-safe async event bus for Rust applications</p>
                
                <div class="links">
                    <a href="./guide/" class="link-button">ðŸ“– User Guide</a>
                    <a href="./tokio_events/" class="link-button">ðŸ“š API Documentation</a>
                </div>
                
                <div>
                    <p>
                        <strong>User Guide:</strong> Learn how to use tokio-events with examples and tutorials<br>
                        <strong>API Documentation:</strong> Complete reference for all types and functions
                    </p>
                </div>
            </div>
        </body>
        </html>
        EOF

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './public'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  validate-links:
    name: Validate Documentation Links
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install link checker
      run: |
        npm install -g markdown-link-check

    - name: Check markdown links
      run: |
        find . -name "*.md" -not -path "./target/*" -not -path "./.git/*" | \
        xargs markdown-link-check --config .github/markdown-link-check.json || true

    - name: Create link check config
      run: |
        mkdir -p .github
        cat > .github/markdown-link-check.json << 'EOF'
        {
          "ignorePatterns": [
            {
              "pattern": "^http://localhost"
            },
            {
              "pattern": "^https://localhost"
            }
          ],
          "replacementPatterns": [
            {
              "pattern": "^/",
              "replacement": "{{BASEURL}}/"
            }
          ],
          "httpHeaders": [
            {
              "urls": ["https://docs.rs"],
              "headers": {
                "User-Agent": "markdown-link-check"
              }
            }
          ],
          "retryOn429": true,
          "retryCount": 3,
          "timeout": "10s"
        }
        EOF