name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans every Monday at 9 AM UTC
    - cron: '0 9 * * 1'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  cargo-audit:
    name: Cargo Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      uses: taiki-e/install-action@cargo-audit

    - name: Run cargo audit
      run: cargo audit --json > audit-results.json

    - name: Upload audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: audit-results
        path: audit-results.json

    - name: Check for vulnerabilities
      run: |
        if cargo audit --quiet; then
          echo "✅ No known security vulnerabilities found"
        else
          echo "❌ Security vulnerabilities detected"
          exit 1
        fi

  cargo-deny:
    name: Cargo Deny Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install cargo-deny
      uses: taiki-e/install-action@cargo-deny

    - name: Create deny.toml if not exists
      run: |
        if [ ! -f deny.toml ]; then
          cat > deny.toml << 'EOF'
        [licenses]
        # List of explicitly allowed licenses
        allow = [
            "MIT",
            "Apache-2.0",
            "Apache-2.0 WITH LLVM-exception",
            "BSD-2-Clause",
            "BSD-3-Clause",
            "ISC",
            "Unicode-DFS-2016",
            "CC0-1.0",
        ]
        # Lint level for when multiple versions of the same license are detected
        multiple-versions = "warn"
        # Lint level for when a license exception is encountered
        exceptions = "warn"

        [bans]
        # Lint level for when multiple versions of the same crate are detected
        multiple-versions = "warn"
        # Lint level for when a wildcard version requirement is detected
        wildcards = "allow"
        highlight = "all"
        workspace-default-features = "allow"
        external-default-features = "allow"
        
        # List of crates that are banned
        deny = [
            # Security vulnerabilities or maintenance issues
        ]

        [advisories]
        # The path where the advisory database is cloned/fetched into
        db-path = "~/.cargo/advisory-db"
        # The url(s) of the advisory databases to use
        db-urls = ["https://github.com/rustsec/advisory-db"]
        # The lint level for security vulnerabilities
        vulnerability = "deny"
        # The lint level for unmaintained crates
        unmaintained = "warn"
        # The lint level for crates that have been yanked from their source registry
        yanked = "warn"
        # The lint level for crates with security notices
        notice = "warn"
        # A list of advisory IDs to ignore
        ignore = []

        [sources]
        # Lint level for what to happen when a crate from a crate registry that is not in the allow list is encountered
        unknown-registry = "warn"
        # Lint level for what to happen when a crate from a git repository that is not in the allow list is encountered
        unknown-git = "warn"
        # List of allowed registries
        allow-registry = ["https://github.com/rust-lang/crates.io-index"]
        # List of allowed Git repositories
        allow-git = []
        EOF
        fi

    - name: Run cargo deny
      run: cargo deny check

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]  # Rust analysis via C++ for now
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build for CodeQL
      run: cargo build --all-features

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, Unicode-DFS-2016, CC0-1.0

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Generate SBOM
      run: |
        # Install cargo-cyclonedx for generating SBOM
        cargo install cargo-cyclonedx
        cargo cyclonedx --format json --output-pattern target/sbom.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: target/sbom.json

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy secret scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        hide-progress: false
        format: 'sarif'
        output: 'trivy-secrets.sarif'
        scanners: 'secret'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-secrets.sarif'

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-license
      run: cargo install cargo-license

    - name: Check licenses
      run: |
        cargo license --json > licenses.json
        
        # Check for any problematic licenses
        if cargo license | grep -E "(GPL|AGPL|LGPL|SSPL|BSL|BUSL)" && [ "$?" -eq 0 ]; then
          echo "❌ Found potentially problematic licenses"
          cargo license
          exit 1
        else
          echo "✅ All licenses are permissive"
        fi

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [cargo-audit, cargo-deny, secrets-scan, license-check]
    if: always()
    steps:
    - name: Generate Security Summary
      run: |
        echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.cargo-audit.result }}" == "success" ]; then
          echo "✅ **Cargo Audit**: No known vulnerabilities" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Cargo Audit**: Issues found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.cargo-deny.result }}" == "success" ]; then
          echo "✅ **Cargo Deny**: All checks passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Cargo Deny**: Policy violations found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.secrets-scan.result }}" == "success" ]; then
          echo "✅ **Secrets Scan**: No secrets detected" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Secrets Scan**: Potential secrets found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.license-check.result }}" == "success" ]; then
          echo "✅ **License Check**: All licenses compliant" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **License Check**: License issues found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "For detailed information, check individual job outputs." >> $GITHUB_STEP_SUMMARY